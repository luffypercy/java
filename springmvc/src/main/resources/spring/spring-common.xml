<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	<!--配置写的数据源 -->
	<bean id="writeDataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		destroy-method="close">
		<property name="driverClassName" value="${write.jdbc.driverClassName}" />
		<property name="url" value="${write.jdbc.url}" />
		<property name="username" value="${write.jdbc.username}" />
		<property name="password" value="${write.jdbc.password}" />
		<!-- 初始化链接大小 -->
		<property name="initialSize" value="${write.pool.initialSize}" />
		<!-- 最大连接数 -->
		<property name="maxActive" value="${write.pool.maxActive}"/>
		<!-- 连接池中最小空闲连接数 -->
		<property name="minIdle" value="${write.pool.minIdle}" />
		<!-- 最大空闲连接数 -->
		<property name="maxIdle" value="${write.pool.maxIdle}" />
		<!--  默认值是无限大，当连接池中连接已经用完了，等待建立一个新连接的最大毫秒数 ( 在抛异常之前 ) -->
		<property name="maxWait" value="${write.pool.maxWait}" />
		<!-- 默认值是 true ，当从连接池取连接时，验证这个连接是否有效 -->
		<property name="testOnBorrow" value="${write.pool.testOnBorrow}" />
		<!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串 -->
		<property name="testWhileIdle" value="${write.pool.testWhileIdle}" />
		<!-- SQL查询,用来验证从连接池取出的连接,在将连接返回给调用者之前.如果指定,则查询必须是一个SQL SELECT并且必须返回至少一行记录 -->
		<property name="validationQuery" value="${write.pool.validationQuery}" />
		<!-- 默认值是 flase, 当从把该连接放回到连接池的时，验证这个连接是否有效 -->
		<property name="testOnReturn" value="${write.pool.testOnReturn}" />
		<!-- 默认值是 1000 * 60 * 30(30 分钟 ) ，连接池中连接可空闲的时间 -->
		<property name="minEvictableIdleTimeMillis" value="${write.pool.minEvictableIdleTimeMillis}" />
		<!--  默认值是 -1 ，每隔一段多少毫秒跑一次回收空闲线程的线程(空闲链接回收器) -->
		<property name="timeBetweenEvictionRunsMillis" value="${write.pool.timeBetweenEvictionRunsMillis}" />
	</bean>
	<!--配置读的数据源 -->
	<bean id="readDataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		destroy-method="close">
		<property name="driverClassName" value="${read.jdbc.driverClassName}" />
		<property name="url" value="${read.jdbc.url}" />
		<property name="username" value="${read.jdbc.username}" />
		<property name="password" value="${read.jdbc.password}" />
		<property name="initialSize" value="${read.pool.initialSize}" />
		<property name="maxActive" value="${read.pool.maxActive}" />
		<property name="minIdle" value="${read.pool.minIdle}" />
		<property name="maxIdle" value="${read.pool.maxIdle}" />
		<property name="maxWait" value="${read.pool.maxWait}" />
		<property name="testOnBorrow" value="${read.pool.testOnBorrow}" />
		<property name="testWhileIdle" value="${read.pool.testWhileIdle}" />
		<property name="validationQuery" value="${read.pool.validationQuery}" />
		<property name="testOnReturn" value="${read.pool.testOnReturn}" />
		<property name="minEvictableIdleTimeMillis" value="${read.pool.minEvictableIdleTimeMillis}" />
		<property name="timeBetweenEvictionRunsMillis" value="${read.pool.timeBetweenEvictionRunsMillis}" />
	</bean>
	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"
		lazy-init="true" />

	<!-- spring事物配置 start -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="writeDataSource" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="select*" read-only="true" propagation="REQUIRED" />
			<tx:method name="find*" read-only="true" propagation="REQUIRED" />
			<!-- 所有的异常都回滚事物 -->
			<tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="serviceOperation"
			expression="execution(* xyxc.wx..*ServiceImpl.*(..)) || execution(* cn.springmvc..*ServiceImpl.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	</aop:config>

	<!-- spring事物配置 end -->

	<!-- Ibatis 写对象 -->
	<bean id="writeSqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="lobHandler" ref="lobHandler" />
		<property name="configLocation" value="classpath:sqlmap.xml" />
		<property name="dataSource" ref="writeDataSource" />
	</bean>
	<!-- Ibatis 读取对象 -->
	<bean id="readSqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="lobHandler" ref="lobHandler" />
		<property name="configLocation" value="classpath:sqlmap.xml" />
		<property name="dataSource" ref="readDataSource" />
	</bean>

	<bean id="writeSqlMap" class="cn.springmvc.dao.impl.DefaultSqlMapImpl">
		<property name="sqlMapClient" ref="writeSqlMapClient" />
	</bean>
	<bean id="readSqlMap" class="cn.springmvc.dao.impl.DefaultSqlMapImpl">
		<property name="sqlMapClient" ref="readSqlMapClient" />
	</bean>
	<!-- 所有dao的基类 -->
	<bean id="baseDao" abstract="true"
		class="cn.springmvc.dao.impl.BaseDaoImpl">
		<property name="writeSqlMap" ref="writeSqlMap" />
		<property name="readSqlMap" ref="readSqlMap" />
	</bean>
	
	<bean id="weixinProxy" class="com.foxinmy.weixin4j.mp.WeixinProxy">
		<!-- 公众号信息:不声明则默认使用weixin4j.properties配置的weixin4j.account字段 -->
		<constructor-arg>
			<bean class="com.foxinmy.weixin4j.model.WeixinAccount">
				<constructor-arg index="0" value="公众账号的appid" />
				<constructor-arg index="1" value="公众账号的appsecret" />
			</bean>
		</constructor-arg>
		<!-- token存储:不声明则默认使用文件方式(FileCacheStorager)保存,请自行引入redis配置文件 -->
		<!-- <constructor-arg>
			<bean class="com.foxinmy.weixin4j.cache.RedisCacheStorager">
				<constructor-arg type="redis.clients.util.Pool">
					<bean class="redis.clients.jedis.JedisPool">
						<constructor-arg index="0">
							<bean class="redis.clients.jedis.JedisPoolConfig">
								<property name="maxTotal" value="${redis.maxTotal}" />
								<property name="maxIdle" value="${redis.maxIdle}" />
								<property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
								<property name="testOnBorrow" value="${redis.testOnBorrow}" />
							</bean>
						</constructor-arg>
						<constructor-arg index="1" value="${redis.host}" />
						<constructor-arg index="2" value="${redis.port}" />
						<constructor-arg index="3" value="${redis.timeout}" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg> -->
	</bean>
	<!-- 微信接口代理～end -->

	<!-- 微信支付接口代理～start -->
	<bean id="weixinPayProxy" class="com.foxinmy.weixin4j.payment.WeixinPayProxy">
		<constructor-arg>
			<!-- 商户信息:不声明则默认使用weixin4j.properties配置的weixin4j.account字段 -->
			<bean class="com.foxinmy.weixin4j.model.WeixinPayAccount">
				<constructor-arg index="0" value="公众账号的appid" />
				<constructor-arg index="1" value="商户平台的支付密钥:paySignkey" />
				<constructor-arg index="2" value="商户平台的商户ID:mchId" />
				<!-- 以下是证书配置，如用到请配置 -->
				<constructor-arg index="3" value="加载支付证书文件的密码(默认为商户号)" />
				<!-- ca证书:调用某些支付接口(如退款、红包)需要用到的证书文件,不声明则获取顺序为:weixin4j.properties#weixin4j.certificate.file->`classpath:ca.p12` -->
				<constructor-arg index="4" value="/path/to/certificate/file" />
			</bean>
		</constructor-arg>
	</bean>
	<!-- 微信支付接口代理～end -->

</beans>